# GitHub Actions CI/CD Pipeline for K6 Performance Testing
# Place this in .github/workflows/performance-tests.yml

name: Performance Testing with K6

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of test to run'
        required: true
        default: 'load'
        type: choice
        options:
        - smoke
        - load
        - stress
        - spike
        - endurance
        - all

jobs:
  performance-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [smoke, load, stress]
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        cd k6-performance-tests
        npm install
    
    - name: Install K6
      run: |
        sudo gpg -k
        sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6
    
    - name: Run Performance Tests
      run: |
        cd k6-performance-tests
        if [ "${{ github.event.inputs.test_type }}" = "all" ] || [ "${{ github.event_name }}" = "schedule" ]; then
          chmod +x scripts/run-all-tests.sh
          ./scripts/run-all-tests.sh
        else
          TEST_TYPE="${{ matrix.test-type }}"
          if [ "${{ github.event.inputs.test_type }}" != "" ]; then
            TEST_TYPE="${{ github.event.inputs.test_type }}"
          fi
          k6 run tests/${TEST_TYPE}/${TEST_TYPE}-test.js
        fi
      env:
        ENVIRONMENT: production
    
    - name: Generate HTML Report
      if: always()
      run: |
        cd k6-performance-tests
        node scripts/generate-report.js
    
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: k6-performance-results-${{ matrix.test-type }}
        path: |
          k6-performance-tests/reports/
        retention-days: 30
    
    - name: Comment PR with Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = 'k6-performance-tests/reports/performance-test-report.html';
          
          if (fs.existsSync(path)) {
            const reportUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ðŸš€ Performance Test Results
              
Performance tests have been executed for this PR.
              
**Test Type:** ${{ matrix.test-type }}
**Environment:** Production
**Report:** [View detailed results](${reportUrl})

The performance test suite validates:
- âœ… Response times under load
- âœ… Error rates and availability  
- âœ… System stability and scalability
- âœ… Resource utilization patterns

*Automated by K6 Enterprise Performance Testing Suite*`
            });
          }

  notify-slack:
    needs: performance-test
    runs-on: ubuntu-latest
    if: always() && github.event_name == 'schedule'
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.performance-test.result }}
        channel: '#performance-alerts'
        text: |
          Daily Performance Test Results for Marvin Marzon Portfolio
          Status: ${{ needs.performance-test.result }}
          Environment: Production
          URL: https://marvinmarzon.netlify.app
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}